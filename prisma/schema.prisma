generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                Int                 @id @default(autoincrement())
  nickname          String?             @db.Text
  password          String?             @db.Text
  email             String?             @db.Text
  points            Int?
  positionId        Int?
  active            Boolean?
  createdAt         DateTime?           @db.DateTime(0)
  classes           classes[]
  logs              logs[]
  user_permissions  user_permissions[]
  positions         positions?          @relation(fields: [positionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_ibfk_1")
  weekly_highlights weekly_highlights[]

  @@index([positionId], map: "positionId")
}

model departments {
  id          Int           @id @default(autoincrement())
  name        String?       @db.Text
  link        String?       @db.Text
  createdAt   DateTime?     @db.DateTime(0)
  icon        String?       @db.Text
  courses     courses[]
  permissions permissions[]
}

model permissions {
  id               Int                @id @default(autoincrement())
  name             String?            @db.Text
  idDepart         Int?
  courses          courses[]
  departments      departments?       @relation(fields: [idDepart], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permissions_ibfk_1")
  user_permissions user_permissions[]

  @@index([idDepart], map: "idDepart")
}

model user_permissions {
  id           Int          @id @default(autoincrement())
  userId       Int?
  permissionId Int?
  users        users?       @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_permissions_ibfk_1")
  permissions  permissions? @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_permissions_ibfk_2")

  @@index([permissionId], map: "permissionId")
  @@index([userId], map: "userId")
}

model weekly_highlights {
  id        Int       @id @default(autoincrement())
  userId    Int?
  startsAt  DateTime? @db.Date
  endsAt    DateTime? @db.Date
  createdAt DateTime? @db.DateTime(0)
  users     users?    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "weekly_highlights_ibfk_1")

  @@index([userId], map: "userId")
}

model positions {
  id     Int     @id @default(autoincrement())
  name   String? @db.Text
  weight Int?
  logs   logs[]
  users  users[]
}

model courses {
  id           Int          @id @default(autoincrement())
  name         String?      @db.Text
  departId     Int?
  permissionId Int?
  classes      classes[]
  departments  departments? @relation(fields: [departId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "courses_ibfk_1")
  permissions  permissions? @relation(fields: [permissionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "courses_ibfk_2")
  logs         logs[]

  @@index([departId], map: "departId")
  @@index([permissionId], map: "permissionId")
}

model logs {
  id          Int        @id @default(autoincrement())
  courseId    Int?
  positionId  Int?
  type        String?    @db.Text
  createdAt   DateTime?  @db.DateTime(0)
  nickname    String?    @db.Text
  observation String?    @db.Text
  createdBy   Int?
  courses     courses?   @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "logs_ibfk_2")
  positions   positions? @relation(fields: [positionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "logs_ibfk_3")
  users       users?     @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "logs_ibfk_4")

  @@index([courseId], map: "courseId")
  @@index([positionId], map: "positionId")
  @@index([createdBy], map: "createdBy")
}

model classes {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime? @db.DateTime(0)
  createdBy   Int?
  courseId    Int?
  observation String?   @db.Text
  nickname    String?   @db.Text
  users       users?    @relation(fields: [createdBy], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_1")
  courses     courses?  @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_2")

  @@index([courseId], map: "courseId")
  @@index([createdBy], map: "createdBy")
}
